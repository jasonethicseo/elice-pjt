name: "Terraform Apply"

on:
  push:
    branches:
      - main
    paths:
      - 'environments/**'
      - 'modules/**'

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: "ca-central-1"

jobs:
  detect-changes:
    name: "Detect Changes"
    runs-on: ubuntu-latest
    outputs:
      core-infra: ${{ steps.changes.outputs.core-infra }}
      domain-order: ${{ steps.changes.outputs.domain-order }}
      domain-product: ${{ steps.changes.outputs.domain-product }}
      domain-user: ${{ steps.changes.outputs.domain-user }}
      modules: ${{ steps.changes.outputs.modules }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          base: HEAD~1
          filters: |
            core-infra:
              - 'environments/dev/core-infra/**'
              - 'modules/vpc/**'
              - 'modules/eks/**'
              - 'modules/openvpn/**'
              - 'modules/s3/**'
              - 'modules/cloudfront/**'
            domain-order:
              - 'environments/dev/domain-order/**'
              - 'modules/aurora/**'
              - 'modules/microservice-base/**'
            domain-product:
              - 'environments/dev/domain-product/**'
              - 'modules/aurora/**'
              - 'modules/microservice-base/**'
            domain-user:
              - 'environments/dev/domain-user/**'
              - 'modules/aurora/**'
              - 'modules/microservice-base/**'
            modules:
              - 'modules/**'

  # Core infrastructure must be applied first
  terraform-apply-core:
    name: "Apply Core Infrastructure"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.core-infra == 'true' || needs.detect-changes.outputs.modules == 'true'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: environments/dev/core-infra
        run: terraform init

      - name: Terraform Plan
        working-directory: environments/dev/core-infra
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: environments/dev/core-infra
        run: terraform apply -auto-approve tfplan

  # Domain infrastructures can be applied in parallel after core
  terraform-apply-domains:
    name: "Apply Domain Infrastructure"
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-apply-core]
    if: always() && (needs.terraform-apply-core.result == 'success' || needs.terraform-apply-core.result == 'skipped')
    
    strategy:
      matrix:
        include:
          - component: "domain-order"
            path: "environments/dev/domain-order"
            condition: ${{ needs.detect-changes.outputs.domain-order == 'true' || needs.detect-changes.outputs.modules == 'true' }}
          - component: "domain-product"
            path: "environments/dev/domain-product"
            condition: ${{ needs.detect-changes.outputs.domain-product == 'true' || needs.detect-changes.outputs.modules == 'true' }}
          - component: "domain-user"
            path: "environments/dev/domain-user"
            condition: ${{ needs.detect-changes.outputs.domain-user == 'true' || needs.detect-changes.outputs.modules == 'true' }}

    steps:
      - name: Checkout
        if: matrix.condition == true
        uses: actions/checkout@v4

      - name: Setup Terraform
        if: matrix.condition == true
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        if: matrix.condition == true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        if: matrix.condition == true
        working-directory: ${{ matrix.path }}
        run: terraform init

      - name: Terraform Plan
        if: matrix.condition == true
        working-directory: ${{ matrix.path }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: matrix.condition == true
        working-directory: ${{ matrix.path }}
        run: terraform apply -auto-approve tfplan

      - name: Output Results
        if: matrix.condition == true
        working-directory: ${{ matrix.path }}
        run: |
          echo "=== ${{ matrix.component }} Apply Results ==="
          terraform output -json

  # Notification job
  notify-results:
    name: "Notify Results"
    runs-on: ubuntu-latest
    needs: [terraform-apply-core, terraform-apply-domains]
    if: always()
    
    steps:
      - name: Create Summary
        run: |
          echo "## Terraform Apply Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Core Infrastructure | ${{ needs.terraform-apply-core.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Domain Services | ${{ needs.terraform-apply-domains.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Deployment completed at $(date)*" >> $GITHUB_STEP_SUMMARY