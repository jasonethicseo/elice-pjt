# name: 'Terraform Plan on AWS - Dev'

# on:
#   push:
#     branches:
#       - "main"
#   pull_request:
#     branches:
#       - "main"

# env:
#   AWS_REGION: ca-central-1

# jobs:
#   backend_setup:
#     name: 'Terraform 백엔드 설정'
#     runs-on: ubuntu-latest
#     steps:
#       - name: 리포지토리 체크아웃
#         uses: actions/checkout@v2

#       - name: AWS 자격 증명 구성
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Terraform 설정
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: '1.8.0'

#       - name: Terraform 백엔드 확인 및 초기화
#         run: |
#           #!/bin/bash
#           set -e

#           BUCKET_NAME="manoit-tfstate-bucket"
#           DYNAMODB_TABLE="manoit-tfstate-lock"
#           KEY_NAME="dev/terraform/terraform.tfstate"

#           echo "S3 버킷 '$BUCKET_NAME' 존재 여부 확인..."
#           if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
#             echo "S3 버킷이 존재하지 않습니다. 생성합니다..."
#             aws s3api create-bucket \
#               --bucket "$BUCKET_NAME" \
#               --region $AWS_REGION \
#               --create-bucket-configuration LocationConstraint=$AWS_REGION

#             echo "버킷 버전 관리 활성화..."
#             aws s3api put-bucket-versioning \
#               --bucket "$BUCKET_NAME" \
#               --versioning-configuration Status=Enabled

#             echo "서버 측 암호화 활성화..."
#             aws s3api put-bucket-encryption \
#               --bucket "$BUCKET_NAME" \
#               --server-side-encryption-configuration '{
#                 "Rules": [
#                   {
#                     "ApplyServerSideEncryptionByDefault": {
#                       "SSEAlgorithm": "AES256"
#                     }
#                   }
#                 ]
#               }'
#           else
#             echo "S3 버킷이 존재합니다."
#           fi

#           echo "DynamoDB 테이블 '$DYNAMODB_TABLE' 존재 여부 확인..."
#           TABLE_EXISTS=$(aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --query "Table.TableName" --output text 2>/dev/null || echo "")
#           if [ -z "$TABLE_EXISTS" ]; then
#             echo "DynamoDB 테이블이 존재하지 않습니다. 생성합니다..."
#             aws dynamodb create-table \
#               --table-name "$DYNAMODB_TABLE" \
#               --attribute-definitions AttributeName=LockID,AttributeType=S \
#               --key-schema AttributeName=LockID,KeyType=HASH \
#               --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
#               --region $AWS_REGION
#           else
#             echo "DynamoDB 테이블이 존재합니다."
#           fi

#           echo "Terraform 백엔드 초기화..."
#           if [ -d backend ]; then
#             cd backend
#             terraform init \
#               -backend-config="bucket=$BUCKET_NAME" \
#               -backend-config="key=$KEY_NAME" \
#               -backend-config="region=$AWS_REGION" \
#               -backend-config="dynamodb_table=$DYNAMODB_TABLE" \
#               -backend-config="encrypt=true"
#           else
#             echo "백엔드 디렉토리가 존재하지 않습니다. 종료합니다..."
#             exit 1
#           fi

#   terraform_plan:
#     name: 'Terraform Plan'
#     runs-on: ubuntu-latest
#     needs: backend_setup
#     environment: develop
#     steps:
#       - name: 리포지토리 체크아웃
#         uses: actions/checkout@v2

#       - name: AWS 자격 증명 구성
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: AWS 프로필 설정 무시
#         run: |
#           echo "AWS_PROFILE=" >> $GITHUB_ENV

#       - name: Terraform 설정
#         uses: hashicorp/setup-terraform@v1
#         with:
#           terraform_version: '1.8.0'

#       - name: Terraform 초기화
#         run: |
#           cd environments/dev
#           terraform init \
#             -backend-config="bucket=manoit-tfstate-bucket" \
#             -backend-config="key=dev/terraform/terraform.tfstate" \
#             -backend-config="region=${{ env.AWS_REGION }}" \
#             -backend-config="dynamodb_table=manoit-tfstate-lock" \
#             -backend-config="encrypt=true"

#       - name: Terraform Plan
#         run: |
#           cd environments/dev
#           terraform plan -out=tfplan -input=false

#       - name: 파괴적 변경 사항 확인
#         id: check_destructive
#         run: |
#           cd environments/dev
#           CHANGES=$(terraform show tfplan) || {
#             echo "terraform show 실행 중 오류 발생:"
#             exit 1
#           }
#           echo "전체 terraform plan 출력:"
#           echo "$CHANGES"
#           if echo "$CHANGES" | grep -E '^\s*-' > /dev/null; then
#             echo "파괴적 변경 사항이 감지되었습니다"
#             echo "has_changes=true" >> $GITHUB_OUTPUT
#           else
#             echo "파괴적 변경 사항 없음"
#             echo "has_changes=false" >> $GITHUB_OUTPUT
#           fi

#       - name: 파괴적 변경 사항이 감지되고 확인되지 않은 경우 실패
#         if: steps.check_destructive.outputs.has_changes == 'true'
#         run: |
#           echo "파괴적 변경 사항이 감지되었습니다. plan을 중단합니다."
#           exit 1


name: 'Terraform Plan on AWS - Dev (Modified)'

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  AWS_REGION: ca-central-1
  TF_BUCKET_NAME: jasonseo-dev-terraform-state       # 사용할 S3 버킷 이름
  TF_DYNAMODB_TABLE: jasonseo-dev-terraform-lock  # 사용할 DynamoDB 테이블 이름
  TF_STATE_KEY: terraform/dev/terraform.tfstate # S3 버킷 내 상태 파일 경로

jobs:
  backend_setup:
    name: 'Ensure Terraform Backend Exists' # 백엔드 존재 확인 및 생성 Job
    runs-on: ubuntu-latest
    outputs: # 다른 Job에서 백엔드 정보 필요 시 사용 (현재는 불필요)
      bucket_name: ${{ env.TF_BUCKET_NAME }}
      dynamodb_table: ${{ env.TF_DYNAMODB_TABLE }}
    steps:
      # 코드 체크아웃은 AWS CLI만 사용하면 필수는 아님 (필요 시 주석 해제)
      # - name: Checkout repository
      #   uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 이 Job에서는 Terraform CLI가 필요 없음 (AWS CLI만 사용)
      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1

      - name: Ensure Backend S3 Bucket and DynamoDB Table Exist
        run: |
          #!/bin/bash
          set -e # 오류 발생 시 즉시 중단

          BUCKET_NAME="${{ env.TF_BUCKET_NAME }}"
          DYNAMODB_TABLE="${{ env.TF_DYNAMODB_TABLE }}"
          REGION="${{ env.AWS_REGION }}"

          echo "Checking S3 bucket '$BUCKET_NAME' in region '$REGION'..."
          # head-bucket으로 존재 및 접근 권한 확인 (NoSuchBucket 또는 AccessDenied 시 실패)
          # 더 강력한 확인을 위해 expected-bucket-owner 추가 (secrets.AWS_ACCOUNT_ID 필요)

          # if ! aws s3api head-bucket --bucket "$BUCKET_NAME" --expected-bucket-owner ${{ secrets.AWS_ACCOUNT_ID }} --region $REGION > /dev/null 2>&1; then
          # 수정 후 예시 (임시 테스트용):
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" --region $REGION > /dev/null 2>&1; then
            echo "S3 bucket '$BUCKET_NAME' not found or inaccessible, attempting creation..."
            # 생성 시 리전 지정 및 LocationConstraint 설정 중요 (ca-central-1은 필요)
            aws s3api create-bucket \
              --bucket "$BUCKET_NAME" \
              --region $REGION \
              --create-bucket-configuration LocationConstraint=$REGION

            echo "Waiting for bucket '$BUCKET_NAME' to be ready..."
            aws s3api wait bucket-exists --bucket "$BUCKET_NAME" --region $REGION

            echo "Enabling bucket versioning..."
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --region $REGION --versioning-configuration Status=Enabled

            echo "Enabling server-side encryption (AES256)..."
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --region $REGION --server-side-encryption-configuration '{
              "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'

            echo "Enabling block public access..."
            aws s3api put-public-access-block \
              --bucket "$BUCKET_NAME" --region $REGION \
              --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"

            echo "S3 Bucket '$BUCKET_NAME' created and configured."
          else
            echo "S3 bucket '$BUCKET_NAME' already exists."
          fi

          echo "Checking DynamoDB table '$DYNAMODB_TABLE' in region '$REGION'..."
          # describe-table으로 존재 확인 (ResourceNotFoundException 시 실패)
          if ! aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region $REGION > /dev/null 2>&1; then
            echo "DynamoDB table '$DYNAMODB_TABLE' not found, attempting creation..."
            aws dynamodb create-table \
              --table-name "$DYNAMODB_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region $REGION # 리전 명시

            echo "Waiting for DynamoDB table '$DYNAMODB_TABLE' to become active..."
            aws dynamodb wait table-exists --table-name "$DYNAMODB_TABLE" --region $REGION
            echo "DynamoDB table '$DYNAMODB_TABLE' created."
          else
            echo "DynamoDB table '$DYNAMODB_TABLE' already exists."
          fi

          echo "Backend resources check/setup complete."

  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: backend_setup # backend_setup Job이 성공해야 실행됨
    # environment: develop # 필요 시 환경 지정

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Terraform Init (using S3 Backend)
        working-directory: environments/dev # 실제 Terraform 코드가 있는 디렉토리
        run: |
          # 환경 변수를 사용하여 백엔드 설정 전달
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET_NAME }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_DYNAMODB_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        working-directory: environments/dev # 실제 Terraform 코드가 있는 디렉토리
        run: |
          terraform plan -out=tfplan -input=false

      - name: Check for Destructive Changes
        id: check_destructive
        working-directory: environments/dev # 실제 Terraform 코드가 있는 디렉토리
        run: |
          # terraform show 결과에서 파괴적 변경('-' 또는 'will be destroyed') 확인
          CHANGES=$(terraform show tfplan) || {
            echo "Error running terraform show."
            exit 1
          }
          # 디버깅 필요 시 주석 해제 (plan이 클 수 있음)
          # echo "Full terraform plan output:"
          # echo "$CHANGES"

          if echo "$CHANGES" | grep -E '^\s*-|will be destroyed' > /dev/null; then
            echo "Destructive changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No destructive changes found"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail if Destructive Changes Detected
        if: steps.check_destructive.outputs.has_changes == 'true'
        run: |
          echo "ERROR: Destructive changes detected in plan. Aborting pipeline."
          exit 1