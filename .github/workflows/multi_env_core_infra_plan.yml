name: 'Multi-Environment Core Infrastructure - Plan'

on:
  push:
    branches:
      - "main"
    paths:
      - "environments/staging/core-infra/**"
      - "environments/production/core-infra/**"
      - "modules/vpc/**"
      - "modules/eks/**"
      - "modules/openvpn/**"
      - "modules/s3/**"
      - "modules/cloudfront/**"
      - "modules/minio/**"
  pull_request:
    branches:
      - "main"
    paths:
      - "environments/staging/core-infra/**"
      - "environments/production/core-infra/**"
      - "modules/vpc/**"
      - "modules/eks/**"
      - "modules/openvpn/**"
      - "modules/s3/**"
      - "modules/cloudfront/**"
      - "modules/minio/**"

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  AWS_REGION: ca-central-1

jobs:
  detect_changes:
    name: 'Detect Changed Environments'
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Detect changed environments
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            CHANGED_FILES=$(git diff --name-only origin/main HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          ENVIRONMENTS=()
          
          # Check each environment
          for env in staging production; do
            if echo "$CHANGED_FILES" | grep -q "environments/${env}/core-infra/\|modules/"; then
              ENVIRONMENTS+=("$env")
            fi
          done
          
          if [ ${#ENVIRONMENTS[@]} -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "environments=[]" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            ENVIRONMENTS_JSON=$(printf '"%s",' "${ENVIRONMENTS[@]}")
            ENVIRONMENTS_JSON="[${ENVIRONMENTS_JSON%,}]"
            echo "environments=$ENVIRONMENTS_JSON" >> $GITHUB_OUTPUT
          fi
          
          echo "Detected environments: $ENVIRONMENTS_JSON"

  terraform_plan_environments:
    name: 'Plan Core Infrastructure'
    runs-on: ubuntu-latest
    needs: detect_changes
    if: needs.detect_changes.outputs.has_changes == 'true'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect_changes.outputs.environments) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout private modules
        uses: actions/checkout@v4
        with:
          repository: jasonethicseo/elice-pjt-modules
          token: ${{ secrets.PRIVATE_MODULES_TOKEN }}
          path: temp-modules
          
      - name: Setup modules directory
        run: |
          cp -r temp-modules/modules ./
          rm -rf temp-modules

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Set Environment Variables
        id: set_env
        run: |
          case "${{ matrix.environment }}" in
            "staging")
              echo "TF_BUCKET_NAME=jasonseo-staging-terraform-state" >> $GITHUB_OUTPUT
              echo "TF_DYNAMODB_TABLE=jasonseo-staging-terraform-lock" >> $GITHUB_OUTPUT
              ;;
            "production")
              echo "TF_BUCKET_NAME=jasonseo-prod-terraform-state" >> $GITHUB_OUTPUT
              echo "TF_DYNAMODB_TABLE=jasonseo-prod-terraform-lock" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Ensure Backend Exists
        run: |
          BUCKET_NAME="${{ steps.set_env.outputs.TF_BUCKET_NAME }}"
          DYNAMODB_TABLE="${{ steps.set_env.outputs.TF_DYNAMODB_TABLE }}"
          
          echo "Checking S3 bucket '$BUCKET_NAME'..."
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" --region "${{ env.AWS_REGION }}" > /dev/null 2>&1; then
            echo "Creating S3 bucket '$BUCKET_NAME'..."
            aws s3api create-bucket \
              --bucket "$BUCKET_NAME" \
              --region "${{ env.AWS_REGION }}" \
              --create-bucket-configuration LocationConstraint="${{ env.AWS_REGION }}"
            
            aws s3api put-bucket-versioning \
              --bucket "$BUCKET_NAME" \
              --versioning-configuration Status=Enabled
            
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET_NAME" \
              --server-side-encryption-configuration '{
                "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          fi
          
          echo "Checking DynamoDB table '$DYNAMODB_TABLE'..."
          if ! aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region "${{ env.AWS_REGION }}" > /dev/null 2>&1; then
            echo "Creating DynamoDB table '$DYNAMODB_TABLE'..."
            aws dynamodb create-table \
              --table-name "$DYNAMODB_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "${{ env.AWS_REGION }}"
            
            aws dynamodb wait table-exists --table-name "$DYNAMODB_TABLE" --region "${{ env.AWS_REGION }}"
          fi

      - name: Terraform Init - ${{ matrix.environment }}
        working-directory: environments/${{ matrix.environment }}/core-infra
        run: |
          terraform init \
            -backend-config="bucket=${{ steps.set_env.outputs.TF_BUCKET_NAME }}" \
            -backend-config="key=terraform/${{ matrix.environment }}/core-infra/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ steps.set_env.outputs.TF_DYNAMODB_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate - ${{ matrix.environment }}
        working-directory: environments/${{ matrix.environment }}/core-infra
        run: terraform validate

      - name: Terraform Plan - ${{ matrix.environment }}
        working-directory: environments/${{ matrix.environment }}/core-infra
        run: |
          terraform plan -out=tfplan -input=false

      - name: Generate JSON Plan - ${{ matrix.environment }}
        working-directory: environments/${{ matrix.environment }}/core-infra
        run: |
          terraform show -json tfplan > plan.json

      - name: Check for Dangerous Actions - ${{ matrix.environment }}
        id: check_dangerous
        working-directory: environments/${{ matrix.environment }}/core-infra
        run: |
          if jq '.resource_changes[]
                   | select(.change.actions | 
                     (index("delete") or 
                      (index("delete") and index("create"))))' plan.json \
             | grep -q .; then
            echo "Dangerous actions detected in ${{ matrix.environment }}"
            echo "has_dangerous=true" >> $GITHUB_OUTPUT
            
            echo "Affected resources:"
            jq -r '.resource_changes[]
                     | select(.change.actions | 
                       (index("delete") or 
                        (index("delete") and index("create"))))
                     | "  - \(.address): \(.change.actions | join(","))"' plan.json
          else
            echo "Only safe actions detected in ${{ matrix.environment }}"
            echo "has_dangerous=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail if Dangerous Actions Detected
        if: steps.check_dangerous.outputs.has_dangerous == 'true'
        run: |
          echo "ERROR: Dangerous actions detected in ${{ matrix.environment }} core infrastructure!"
          echo ""
          echo "BLOCKED: Only create and update actions are allowed for safety."
          echo "This could cause downtime and affect all domain modules."
          echo ""
          echo "If this change is intentional and necessary:"
          echo "  1. Review the plan output carefully"
          echo "  2. Coordinate with the team"
          echo "  3. Plan for maintenance window"
          echo "  4. Use manual override if absolutely required"
          exit 1

      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: environments/${{ matrix.environment }}/core-infra/tfplan

      - name: Upload Terraform Plan JSON Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-json-${{ matrix.environment }}
          path: environments/${{ matrix.environment }}/core-infra/plan.json