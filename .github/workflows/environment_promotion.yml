name: 'Environment Promotion'

on:
  workflow_dispatch:
    inputs:
      source_environment:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - dev
          - staging
      target_environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      promote_core_infra:
        description: 'Promote core infrastructure'
        required: false
        default: false
        type: boolean
      promote_domains:
        description: 'Domains to promote (comma-separated: user,product,order or "all")'
        required: true
        default: 'all'
      confirm_promotion:
        description: 'Type PROMOTE to confirm'
        required: true
        default: ''

env:
  AWS_REGION: ca-central-1

jobs:
  validate_promotion:
    name: 'Validate Promotion Request'
    runs-on: ubuntu-latest
    outputs:
      source_bucket: ${{ steps.validate.outputs.source_bucket }}
      target_bucket: ${{ steps.validate.outputs.target_bucket }}
      source_table: ${{ steps.validate.outputs.source_table }}
      target_table: ${{ steps.validate.outputs.target_table }}
      domains: ${{ steps.validate.outputs.domains }}
    steps:
      - name: Validate inputs
        id: validate
        run: |
          if [ "${{ github.event.inputs.confirm_promotion }}" != "PROMOTE" ]; then
            echo "ERROR: Promotion confirmation not provided."
            echo "Please type 'PROMOTE' in the confirm_promotion input."
            exit 1
          fi
          
          # 환경 조합 검증
          if [ "${{ github.event.inputs.source_environment }}" = "dev" ] && [ "${{ github.event.inputs.target_environment }}" != "staging" ]; then
            echo "ERROR: Dev can only promote to staging"
            exit 1
          fi
          
          if [ "${{ github.event.inputs.source_environment }}" = "staging" ] && [ "${{ github.event.inputs.target_environment }}" != "production" ]; then
            echo "ERROR: Staging can only promote to production"
            exit 1
          fi
          
          # 버킷 및 테이블 이름 설정
          case "${{ github.event.inputs.source_environment }}" in
            "dev")
              echo "source_bucket=jasonseo-dev-terraform-state" >> $GITHUB_OUTPUT
              echo "source_table=jasonseo-dev-terraform-lock" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "source_bucket=jasonseo-staging-terraform-state" >> $GITHUB_OUTPUT
              echo "source_table=jasonseo-staging-terraform-lock" >> $GITHUB_OUTPUT
              ;;
          esac
          
          case "${{ github.event.inputs.target_environment }}" in
            "staging")
              echo "target_bucket=jasonseo-staging-terraform-state" >> $GITHUB_OUTPUT
              echo "target_table=jasonseo-staging-terraform-lock" >> $GITHUB_OUTPUT
              ;;
            "production")
              echo "target_bucket=jasonseo-prod-terraform-state" >> $GITHUB_OUTPUT
              echo "target_table=jasonseo-prod-terraform-lock" >> $GITHUB_OUTPUT
              ;;
          esac
          
          # 도메인 파싱
          INPUT_DOMAINS="${{ github.event.inputs.promote_domains }}"
          if [ "$INPUT_DOMAINS" = "all" ]; then
            DOMAINS='["user", "product", "order"]'
          else
            IFS=',' read -ra DOMAIN_ARRAY <<< "$INPUT_DOMAINS"
            DOMAINS="["
            for domain in "${DOMAIN_ARRAY[@]}"; do
              domain=$(echo "$domain" | xargs)
              if [[ "$domain" =~ ^(user|product|order)$ ]]; then
                DOMAINS="${DOMAINS}\"$domain\","
              else
                echo "ERROR: Invalid domain: $domain"
                exit 1
              fi
            done
            DOMAINS="${DOMAINS%,}]"
          fi
          echo "domains=$DOMAINS" >> $GITHUB_OUTPUT
          
          echo "Promotion validated: ${{ github.event.inputs.source_environment }} -> ${{ github.event.inputs.target_environment }}"
          echo "Domains to promote: $DOMAINS"

  check_source_state:
    name: 'Check Source Environment State'
    runs-on: ubuntu-latest
    needs: validate_promotion
    outputs:
      core_exists: ${{ steps.check_core.outputs.core_exists }}
      domains_exist: ${{ steps.check_domains.outputs.domains_exist }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check Core Infrastructure State
        id: check_core
        run: |
          SOURCE_BUCKET="${{ needs.validate_promotion.outputs.source_bucket }}"
          CORE_KEY="terraform/${{ github.event.inputs.source_environment }}/core-infra/terraform.tfstate"
          
          if aws s3api head-object --bucket "$SOURCE_BUCKET" --key "$CORE_KEY" --region "${{ env.AWS_REGION }}" > /dev/null 2>&1; then
            echo "Core infrastructure state found in source"
            echo "core_exists=true" >> $GITHUB_OUTPUT
          else
            echo "ERROR: Core infrastructure state not found in source environment"
            echo "core_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check Domain States
        id: check_domains
        run: |
          SOURCE_BUCKET="${{ needs.validate_promotion.outputs.source_bucket }}"
          DOMAINS_JSON="${{ needs.validate_promotion.outputs.domains }}"
          DOMAINS=$(echo "$DOMAINS_JSON" | jq -r '.[]')
          
          ALL_EXIST=true
          for domain in $DOMAINS; do
            DOMAIN_KEY="terraform/${{ github.event.inputs.source_environment }}/domain-${domain}/terraform.tfstate"
            if ! aws s3api head-object --bucket "$SOURCE_BUCKET" --key "$DOMAIN_KEY" --region "${{ env.AWS_REGION }}" > /dev/null 2>&1; then
              echo "ERROR: Domain $domain state not found in source environment"
              ALL_EXIST=false
            else
              echo "Domain $domain state found in source"
            fi
          done
          
          if [ "$ALL_EXIST" = true ]; then
            echo "domains_exist=true" >> $GITHUB_OUTPUT
          else
            echo "domains_exist=false" >> $GITHUB_OUTPUT
          fi

  promote_core_infrastructure:
    name: 'Promote Core Infrastructure'
    runs-on: ubuntu-latest
    needs: [validate_promotion, check_source_state]
    if: github.event.inputs.promote_core_infra == 'true' && needs.check_source_state.outputs.core_exists == 'true'
    environment: 
      name: ${{ github.event.inputs.target_environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout private modules
        uses: actions/checkout@v4
        with:
          repository: jasonethicseo/elice-pjt-modules
          token: ${{ secrets.PRIVATE_MODULES_TOKEN }}
          path: temp-modules
          
      - name: Setup modules directory
        run: |
          cp -r temp-modules/modules ./
          rm -rf temp-modules

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Ensure Target Backend Exists
        run: |
          TARGET_BUCKET="${{ needs.validate_promotion.outputs.target_bucket }}"
          TARGET_TABLE="${{ needs.validate_promotion.outputs.target_table }}"
          
          echo "Ensuring target backend exists..."
          if ! aws s3api head-bucket --bucket "$TARGET_BUCKET" --region "${{ env.AWS_REGION }}" > /dev/null 2>&1; then
            echo "Creating target S3 bucket..."
            aws s3api create-bucket \
              --bucket "$TARGET_BUCKET" \
              --region "${{ env.AWS_REGION }}" \
              --create-bucket-configuration LocationConstraint="${{ env.AWS_REGION }}"
            
            aws s3api put-bucket-versioning \
              --bucket "$TARGET_BUCKET" \
              --versioning-configuration Status=Enabled
          fi
          
          if ! aws dynamodb describe-table --table-name "$TARGET_TABLE" --region "${{ env.AWS_REGION }}" > /dev/null 2>&1; then
            echo "Creating target DynamoDB table..."
            aws dynamodb create-table \
              --table-name "$TARGET_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "${{ env.AWS_REGION }}"
            
            aws dynamodb wait table-exists --table-name "$TARGET_TABLE" --region "${{ env.AWS_REGION }}"
          fi

      - name: Terraform Init - Target Environment
        working-directory: environments/${{ github.event.inputs.target_environment }}/core-infra
        run: |
          terraform init \
            -backend-config="bucket=${{ needs.validate_promotion.outputs.target_bucket }}" \
            -backend-config="key=terraform/${{ github.event.inputs.target_environment }}/core-infra/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ needs.validate_promotion.outputs.target_table }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan - Target Environment
        working-directory: environments/${{ github.event.inputs.target_environment }}/core-infra
        run: |
          terraform plan -out=tfplan -input=false

      - name: Terraform Apply - Target Environment
        working-directory: environments/${{ github.event.inputs.target_environment }}/core-infra
        run: |
          terraform apply -auto-approve tfplan

      - name: Summary
        run: |
          echo "Core infrastructure promoted successfully!"
          echo "Source: ${{ github.event.inputs.source_environment }}"
          echo "Target: ${{ github.event.inputs.target_environment }}"

  promote_domains:
    name: 'Promote Domain'
    runs-on: ubuntu-latest
    needs: [validate_promotion, check_source_state, promote_core_infrastructure]
    if: always() && needs.check_source_state.outputs.domains_exist == 'true' && (needs.promote_core_infrastructure.result == 'success' || needs.promote_core_infrastructure.result == 'skipped')
    strategy:
      matrix:
        domain: ${{ fromJson(needs.validate_promotion.outputs.domains) }}
      fail-fast: false
    environment: 
      name: ${{ github.event.inputs.target_environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Checkout private modules
        uses: actions/checkout@v4
        with:
          repository: jasonethicseo/elice-pjt-modules
          token: ${{ secrets.PRIVATE_MODULES_TOKEN }}
          path: temp-modules
          
      - name: Setup modules directory
        run: |
          cp -r temp-modules/modules ./
          rm -rf temp-modules

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Terraform Init - Domain ${{ matrix.domain }}
        working-directory: environments/${{ github.event.inputs.target_environment }}/domain-${{ matrix.domain }}
        run: |
          terraform init \
            -backend-config="bucket=${{ needs.validate_promotion.outputs.target_bucket }}" \
            -backend-config="key=terraform/${{ github.event.inputs.target_environment }}/domain-${{ matrix.domain }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ needs.validate_promotion.outputs.target_table }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan - Domain ${{ matrix.domain }}
        working-directory: environments/${{ github.event.inputs.target_environment }}/domain-${{ matrix.domain }}
        run: |
          terraform plan -out=tfplan-${{ matrix.domain }} -input=false

      - name: Terraform Apply - Domain ${{ matrix.domain }}
        working-directory: environments/${{ github.event.inputs.target_environment }}/domain-${{ matrix.domain }}
        run: |
          terraform apply -auto-approve tfplan-${{ matrix.domain }}

      - name: Summary - Domain ${{ matrix.domain }}
        run: |
          echo "Domain ${{ matrix.domain }} promoted successfully!"
          echo "Source: ${{ github.event.inputs.source_environment }}"
          echo "Target: ${{ github.event.inputs.target_environment }}"

  promotion_summary:
    name: 'Promotion Summary'
    runs-on: ubuntu-latest
    needs: [validate_promotion, promote_core_infrastructure, promote_domains]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "Environment Promotion Summary"
          echo "============================="
          echo ""
          echo "Source Environment: ${{ github.event.inputs.source_environment }}"
          echo "Target Environment: ${{ github.event.inputs.target_environment }}"
          echo "Domains Promoted: ${{ needs.validate_promotion.outputs.domains }}"
          echo "Core Infrastructure: ${{ github.event.inputs.promote_core_infra == 'true' && 'Promoted' || 'Skipped' }}"
          echo "Timestamp: $(date)"
          echo ""
          
          if [ "${{ needs.promote_core_infrastructure.result }}" = "success" ] || [ "${{ needs.promote_core_infrastructure.result }}" = "skipped" ]; then
            if [ "${{ needs.promote_domains.result }}" = "success" ]; then
              echo "Promotion completed successfully!"
              echo ""
              echo "Next Steps:"
              echo "1. Verify infrastructure in target environment"
              echo "2. Deploy application services"
              echo "3. Run smoke tests"
              echo "4. Update DNS/routing if needed"
            else
              echo "Promotion completed with issues in domain deployment"
              echo "Please check the domain promotion logs"
            fi
          else
            echo "Promotion failed during core infrastructure deployment"
            echo "Please check the core infrastructure logs"
          fi