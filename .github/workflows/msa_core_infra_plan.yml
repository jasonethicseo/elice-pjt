name: 'MSA Core Infrastructure - Terraform Plan'

on:
  push:
    branches:
      - "main"
    paths:
      - "environments/dev/core-infra/**"
      - "modules/vpc/**"
      - "modules/eks/**"
      - "modules/openvpn/**"
      - "modules/s3/**"
      - "modules/cloudfront/**"
  pull_request:
    branches:
      - "main"
    paths:
      - "environments/dev/core-infra/**"
      - "modules/vpc/**"
      - "modules/eks/**"
      - "modules/openvpn/**"
      - "modules/s3/**"
      - "modules/cloudfront/**"

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  AWS_REGION: ca-central-1
  TF_BUCKET_NAME: jasonseo-dev-terraform-state
  TF_DYNAMODB_TABLE: jasonseo-dev-terraform-lock
  TF_STATE_KEY: terraform/dev/core-infra/terraform.tfstate

jobs:
  backend_setup:
    name: 'Ensure Terraform Backend Exists'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure Backend S3 Bucket and DynamoDB Table Exist
        run: |
          #!/bin/bash
          set -e

          BUCKET_NAME="${{ env.TF_BUCKET_NAME }}"
          DYNAMODB_TABLE="${{ env.TF_DYNAMODB_TABLE }}"
          REGION="${{ env.AWS_REGION }}"

          echo "🔍 Checking S3 bucket '$BUCKET_NAME' in region '$REGION'..."
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" --region $REGION > /dev/null 2>&1; then
            echo "📦 Creating S3 bucket '$BUCKET_NAME'..."
            aws s3api create-bucket \
              --bucket "$BUCKET_NAME" \
              --region $REGION \
              --create-bucket-configuration LocationConstraint=$REGION

            echo "⏳ Waiting for bucket to be ready..."
            aws s3api wait bucket-exists --bucket "$BUCKET_NAME" --region $REGION

            echo "🔄 Enabling bucket versioning..."
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --region $REGION --versioning-configuration Status=Enabled

            echo "🔐 Enabling server-side encryption..."
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --region $REGION --server-side-encryption-configuration '{
              "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'

            echo "🚫 Enabling block public access..."
            aws s3api put-public-access-block \
              --bucket "$BUCKET_NAME" --region $REGION \
              --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"

            echo "✅ S3 Bucket '$BUCKET_NAME' created and configured."
          else
            echo "✅ S3 bucket '$BUCKET_NAME' already exists."
          fi

          echo "🔍 Checking DynamoDB table '$DYNAMODB_TABLE' in region '$REGION'..."
          if ! aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region $REGION > /dev/null 2>&1; then
            echo "📊 Creating DynamoDB table '$DYNAMODB_TABLE'..."
            aws dynamodb create-table \
              --table-name "$DYNAMODB_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region $REGION

            echo "⏳ Waiting for DynamoDB table to become active..."
            aws dynamodb wait table-exists --table-name "$DYNAMODB_TABLE" --region $REGION
            echo "✅ DynamoDB table '$DYNAMODB_TABLE' created."
          else
            echo "✅ DynamoDB table '$DYNAMODB_TABLE' already exists."
          fi

          echo "🎉 Backend resources check/setup complete."

  terraform_plan:
    name: 'Core Infrastructure - Terraform Plan'
    runs-on: ubuntu-latest
    needs: backend_setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Terraform Init
        working-directory: environments/dev/core-infra
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET_NAME }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_DYNAMODB_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        working-directory: environments/dev/core-infra
        run: terraform validate

      - name: Terraform Plan
        working-directory: environments/dev/core-infra
        run: |
          terraform plan -out=tfplan -input=false

      - name: Generate JSON Plan
        working-directory: environments/dev/core-infra
        run: |
          # tfplan을 JSON으로 바로 저장 → 깨질 위험 없음
          terraform show -json tfplan > plan.json

      - name: Check for Dangerous Actions (delete/replace)
        id: check_dangerous
        working-directory: environments/dev/core-infra
        run: |
          if jq '.resource_changes[]
                   | select(.change.actions | 
                     (index("delete") or 
                      (index("delete") and index("create"))))' plan.json \
             | grep -q .; then
            echo "⚠️  Dangerous actions (delete/replace) detected in core infrastructure"
            echo "has_dangerous=true" >> $GITHUB_OUTPUT
            
            # Show what resources would be affected
            echo "📋 Affected resources:"
            jq -r '.resource_changes[]
                     | select(.change.actions | 
                       (index("delete") or 
                        (index("delete") and index("create"))))
                     | "  - \(.address): \(.change.actions | join(","))"' plan.json
          else
            echo "✅ Only safe actions (create/update) detected"
            echo "has_dangerous=false" >> $GITHUB_OUTPUT
          fi

      - name: Summarize Terraform Plan
        id: summary
        working-directory: environments/dev/core-infra

        run: |
          added=$(jq '[.resource_changes[] | select(.change.actions[]=="create")] | length' plan.json)
          updated=$(jq '[.resource_changes[] | select(.change.actions[]=="update")] | length' plan.json)
          destroyed=$(jq '[.resource_changes[] | select(.change.actions[]=="delete")] | length' plan.json)
          echo "added=${added}"    >> $GITHUB_OUTPUT
          echo "updated=${updated}">> $GITHUB_OUTPUT
          echo "destroyed=${destroyed}" >> $GITHUB_OUTPUT

      # - name: Post Plan Summary Comment
      #   if: github.event_name == 'pull_request'
      #   uses: peter-evans/create-or-update-comment@v4
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     issue-number: ${{ github.event.pull_request.number }}
      #     body: |
      #       ## 🏗️ Core Infrastructure Terraform Plan
      #       ${{ steps.summary.outputs.added }} to add  
      #       ${{ steps.summary.outputs.updated }} to change  
      #       ${{ steps.summary.outputs.destroyed }} to destroy  

      #       ${{ steps.check_dangerous.outputs.has_dangerous == 'true' && '🚨 **DANGEROUS ACTIONS DETECTED!**' || '✅ **SAFE: Only create/update actions**' }}

      #       <details>
      #       <summary>📋 Full Plan JSON (artifact)</summary>
            
      #       전체 Plan 보기 → 워크플로우 아티팩트의 `terraform-plan-json` 다운로드  
      #       </details>

      - name: Fail if Dangerous Actions Detected
        if: steps.check_dangerous.outputs.has_dangerous == 'true'
        run: |
          echo "🚨 ERROR: Dangerous actions (delete/replace) detected in core infrastructure!"
          echo ""
          echo "❌ BLOCKED: Only create and update actions are allowed for safety."
          echo "⚠️  This could cause downtime and affect all domain modules."
          echo ""
          echo "🔍 If this change is intentional and necessary:"
          echo "  1. Review the plan output carefully"
          echo "  2. Coordinate with the team"
          echo "  3. Plan for maintenance window"
          echo "  4. Use manual override if absolutely required"
          exit 1

      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: environments/dev/core-infra/tfplan

      - name: Upload Terraform Plan JSON Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-json
          path: environments/dev/core-infra/plan.json