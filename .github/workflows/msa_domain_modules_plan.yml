name: 'MSA Domain Modules - Terraform Plan'

on:
  push:
    branches:
      - "main"
    paths:
      - "environments/dev/domain-*/**"
      - "modules/microservice-base/**"
      - "modules/aurora/**"
  pull_request:
    branches:
      - "main"
    paths:
      - "environments/dev/domain-*/**"
      - "modules/microservice-base/**"
      - "modules/aurora/**"

env:
  AWS_REGION: ca-central-1
  TF_BUCKET_NAME: jasonseo-dev-terraform-state
  TF_DYNAMODB_TABLE: jasonseo-dev-terraform-lock

jobs:
  detect_changes:
    name: 'Detect Changed Domain Modules'
    runs-on: ubuntu-latest
    outputs:
      domains: ${{ steps.detect.outputs.domains }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Detect changed domains
        id: detect
        run: |
          # Get changed files between current commit and main
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            CHANGED_FILES=$(git diff --name-only origin/main HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Detect affected domains
          DOMAINS=()
          
          # Check each domain
          for domain in user product order; do
            if echo "$CHANGED_FILES" | grep -q "environments/dev/domain-${domain}/\|modules/microservice-base/\|modules/aurora/"; then
              DOMAINS+=("$domain")
            fi
          done
          
          if [ ${#DOMAINS[@]} -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "domains=[]" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            # Convert array to JSON format
            DOMAINS_JSON=$(printf '"%s",' "${DOMAINS[@]}")
            DOMAINS_JSON="[${DOMAINS_JSON%,}]"
            echo "domains=$DOMAINS_JSON" >> $GITHUB_OUTPUT
          fi
          
          echo "Detected domains: $DOMAINS_JSON"

  terraform_plan_domains:
    name: 'Plan Domain Module'
    runs-on: ubuntu-latest
    needs: detect_changes
    if: needs.detect_changes.outputs.has_changes == 'true'
    strategy:
      matrix:
        domain: ${{ fromJson(needs.detect_changes.outputs.domains) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Check Core Infrastructure State
        id: check_core
        run: |
          # Check if core-infra state exists
          if aws s3api head-object --bucket "${{ env.TF_BUCKET_NAME }}" --key "terraform/dev/core-infra/terraform.tfstate" --region "${{ env.AWS_REGION }}" > /dev/null 2>&1; then
            echo "‚úÖ Core infrastructure state found"
            echo "core_exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Core infrastructure state not found"
            echo "core_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init - Domain ${{ matrix.domain }}
        if: steps.check_core.outputs.core_exists == 'true'
        working-directory: environments/dev/domain-${{ matrix.domain }}
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET_NAME }}" \
            -backend-config="key=terraform/dev/domain-${{ matrix.domain }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_DYNAMODB_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate - Domain ${{ matrix.domain }}
        if: steps.check_core.outputs.core_exists == 'true'
        working-directory: environments/dev/domain-${{ matrix.domain }}
        run: terraform validate

      - name: Terraform Plan - Domain ${{ matrix.domain }}
        if: steps.check_core.outputs.core_exists == 'true'
        working-directory: environments/dev/domain-${{ matrix.domain }}
        run: |
          terraform plan -out=tfplan-${{ matrix.domain }} -input=false

      - name: Generate JSON Plan - Domain ${{ matrix.domain }}
        if: steps.check_core.outputs.core_exists == 'true'
        working-directory: environments/dev/domain-${{ matrix.domain }}
        run: terraform show -json tfplan-${{ matrix.domain }} > plan.json

      - name: Check for Dangerous Actions (delete/replace) - Domain ${{ matrix.domain }}
        if: steps.check_core.outputs.core_exists == 'true'
        id: check_dangerous
        working-directory: environments/dev/domain-${{ matrix.domain }}
        run: |
          if jq '.resource_changes[]
                   | select(.change.actions | 
                     (index("delete") or 
                      (index("delete") and index("create"))))' plan.json \
             | grep -q .; then
            echo "‚ö†Ô∏è  Dangerous actions (delete/replace) detected in domain ${{ matrix.domain }}"
            echo "has_dangerous=true" >> $GITHUB_OUTPUT
            
            # Show what resources would be affected
            echo "üìã Affected resources in domain ${{ matrix.domain }}:"
            jq -r '.resource_changes[]
                     | select(.change.actions | 
                       (index("delete") or 
                        (index("delete") and index("create"))))
                     | "  - \(.address): \(.change.actions | join(","))"' plan.json
          else
            echo "‚úÖ Only safe actions (create/update) detected in domain ${{ matrix.domain }}"
            echo "has_dangerous=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment Plan Results for Domain ${{ matrix.domain }}
        if: github.event_name == 'pull_request' && steps.check_core.outputs.core_exists == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            try {
              const planOutput = execSync('cd environments/dev/domain-${{ matrix.domain }} && terraform show tfplan-${{ matrix.domain }}', { encoding: 'utf8' });
              const hasDangerous = '${{ steps.check_dangerous.outputs.has_dangerous }}' === 'true';
              
              const comment = `
              ## üè™ Domain ${{ matrix.domain }} Terraform Plan
              
              ${hasDangerous ? 'üö® **DANGEROUS ACTIONS DETECTED!**' : '‚úÖ **SAFE: Only create/update actions**'}
              
              <details>
              <summary>üìã Plan Output for Domain ${{ matrix.domain }}</summary>
              
              \`\`\`
              ${planOutput}
              \`\`\`
              
              </details>
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error posting comment:', error);
            }

      - name: Fail if Core Infrastructure Missing
        if: steps.check_core.outputs.core_exists == 'false'
        run: |
          echo "‚ùå ERROR: Core infrastructure must be deployed before domain modules."
          echo "Please deploy core-infra first using the MSA Core Infrastructure workflow."
          exit 1

      - name: Fail if Dangerous Actions Detected
        if: steps.check_core.outputs.core_exists == 'true' && steps.check_dangerous.outputs.has_dangerous == 'true'
        run: |
          echo "üö® ERROR: Dangerous actions (delete/replace) detected in domain ${{ matrix.domain }}!"
          echo ""
          echo "‚ùå BLOCKED: Only create and update actions are allowed for safety."
          echo "‚ö†Ô∏è  This could cause downtime for this domain's services."
          echo ""
          echo "üîç If this change is intentional and necessary:"
          echo "  1. Review the plan output carefully"
          echo "  2. Coordinate with the domain team"
          echo "  3. Plan for maintenance window"
          echo "  4. Use manual override if absolutely required"
          exit 1