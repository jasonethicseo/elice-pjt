name: 'MSA Core Infrastructure - Apply/Destroy'

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
      confirm_destroy:
        description: 'Type DESTROY to confirm deletion of core infrastructure'
        required: false
        default: ''
      skip_plan:
        description: 'Skip plan validation (not recommended)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ca-central-1
  TF_BUCKET_NAME: jasonseo-dev-terraform-state
  TF_DYNAMODB_TABLE: jasonseo-dev-terraform-lock
  TF_STATE_KEY: terraform/dev/core-infra/terraform.tfstate

jobs:
  backend_setup:
    name: 'Ensure Terraform Backend Exists'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure Backend S3 Bucket and DynamoDB Table Exist
        run: |
          #!/bin/bash
          set -e

          BUCKET_NAME="${{ env.TF_BUCKET_NAME }}"
          DYNAMODB_TABLE="${{ env.TF_DYNAMODB_TABLE }}"
          REGION="${{ env.AWS_REGION }}"

          echo "üîç Checking S3 bucket '$BUCKET_NAME' in region '$REGION'..."
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" --region $REGION > /dev/null 2>&1; then
            echo "üì¶ Creating S3 bucket '$BUCKET_NAME'..."
            aws s3api create-bucket \
              --bucket "$BUCKET_NAME" \
              --region $REGION \
              --create-bucket-configuration LocationConstraint=$REGION

            echo "‚è≥ Waiting for bucket to be ready..."
            aws s3api wait bucket-exists --bucket "$BUCKET_NAME" --region $REGION

            echo "üîÑ Enabling bucket versioning..."
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --region $REGION --versioning-configuration Status=Enabled

            echo "üîê Enabling server-side encryption..."
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --region $REGION --server-side-encryption-configuration '{
              "Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'

            echo "üö´ Enabling block public access..."
            aws s3api put-public-access-block \
              --bucket "$BUCKET_NAME" --region $REGION \
              --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"

            echo "‚úÖ S3 Bucket '$BUCKET_NAME' created and configured."
          else
            echo "‚úÖ S3 bucket '$BUCKET_NAME' already exists."
          fi

          echo "üîç Checking DynamoDB table '$DYNAMODB_TABLE' in region '$REGION'..."
          if ! aws dynamodb describe-table --table-name "$DYNAMODB_TABLE" --region $REGION > /dev/null 2>&1; then
            echo "üìä Creating DynamoDB table '$DYNAMODB_TABLE'..."
            aws dynamodb create-table \
              --table-name "$DYNAMODB_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region $REGION

            echo "‚è≥ Waiting for DynamoDB table to become active..."
            aws dynamodb wait table-exists --table-name "$DYNAMODB_TABLE" --region $REGION
            echo "‚úÖ DynamoDB table '$DYNAMODB_TABLE' created."
          else
            echo "‚úÖ DynamoDB table '$DYNAMODB_TABLE' already exists."
          fi

  check_domain_dependencies:
    name: 'Check Domain Dependencies'
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    outputs:
      has_domains: ${{ steps.check.outputs.has_domains }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check for Domain Module States
        id: check
        run: |
          echo "üîç Checking for domain module states..."
          
          DOMAINS=("user" "product" "order")
          HAS_DOMAINS=false
          
          for domain in "${DOMAINS[@]}"; do
            if aws s3api head-object --bucket "${{ env.TF_BUCKET_NAME }}" --key "terraform/dev/domain-${domain}/terraform.tfstate" --region "${{ env.AWS_REGION }}" > /dev/null 2>&1; then
              echo "‚ö†Ô∏è  Found domain state: domain-${domain}"
              HAS_DOMAINS=true
            fi
          done
          
          if [ "$HAS_DOMAINS" = true ]; then
            echo "has_domains=true" >> $GITHUB_OUTPUT
          else
            echo "has_domains=false" >> $GITHUB_OUTPUT
          fi

  terraform_apply_destroy:
    name: 'Core Infrastructure - Apply/Destroy'
    runs-on: ubuntu-latest
    needs: [backend_setup, check_domain_dependencies]
    if: always() && needs.backend_setup.result == 'success' && (needs.check_domain_dependencies.result == 'success' || needs.check_domain_dependencies.result == 'skipped')
    environment: 
      name: ${{ github.event.inputs.action == 'destroy' && 'production' || 'development' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Terraform Init
        working-directory: environments/dev/core-infra
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET_NAME }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.TF_DYNAMODB_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        if: github.event.inputs.skip_plan == 'false'
        working-directory: environments/dev/core-infra
        run: |
          if [ "${{ github.event.inputs.action }}" = "destroy" ]; then
            terraform plan -destroy -out=tfplan -input=false
          else
            terraform plan -out=tfplan -input=false
          fi

      - name: Generate JSON Plan
        if: github.event.inputs.skip_plan == 'false'
        working-directory: environments/dev/core-infra
        run: terraform show -json tfplan > plan.json

      - name: Check for Dangerous Actions (delete/replace)
        if: github.event.inputs.skip_plan == 'false' && github.event.inputs.action == 'apply'
        id: check_dangerous
        working-directory: environments/dev/core-infra
        run: |
          if jq '.resource_changes[]
                   | select(.change.actions | 
                     (index("delete") or 
                      (index("delete") and index("create"))))' plan.json \
             | grep -q .; then
            echo "‚ö†Ô∏è  Dangerous actions (delete/replace) detected in core infrastructure"
            echo "has_dangerous=true" >> $GITHUB_OUTPUT
            
            # Show what resources would be affected
            echo "üìã Affected resources:"
            jq -r '.resource_changes[]
                     | select(.change.actions | 
                       (index("delete") or 
                        (index("delete") and index("create"))))
                     | "  - \(.address): \(.change.actions | join(","))"' plan.json
          else
            echo "‚úÖ Only safe actions (create/update) detected"
            echo "has_dangerous=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate Destroy Prerequisites
        if: github.event.inputs.action == 'destroy'
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
            echo "‚ùå ERROR: Destroy confirmation not provided."
            echo "Please type 'DESTROY' in the confirm_destroy input to proceed."
            exit 1
          fi
          
          if [ "${{ needs.check_domain_dependencies.outputs.has_domains }}" = "true" ]; then
            echo "‚ùå ERROR: Domain modules still exist."
            echo "Please destroy all domain modules before destroying core infrastructure."
            exit 1
          fi

      - name: Fail if Dangerous Actions Detected
        if: github.event.inputs.skip_plan == 'false' && github.event.inputs.action == 'apply' && steps.check_dangerous.outputs.has_dangerous == 'true'
        run: |
          echo "üö® ERROR: Dangerous actions (delete/replace) detected in core infrastructure!"
          echo ""
          echo "‚ùå BLOCKED: Only create and update actions are allowed for safety."
          echo "‚ö†Ô∏è  This could cause downtime and affect all domain modules."
          echo ""
          echo "üîç If this change is intentional and necessary:"
          echo "  1. Review the plan output carefully"
          echo "  2. Coordinate with all teams"
          echo "  3. Schedule maintenance window"
          echo "  4. Use skip_plan=true for emergency override"
          exit 1

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: environments/dev/core-infra
        run: |
          if [ "${{ github.event.inputs.skip_plan }}" = "true" ]; then
            terraform apply -auto-approve -input=false
          else
            terraform apply -auto-approve tfplan
          fi

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: environments/dev/core-infra
        run: |
          if [ "${{ github.event.inputs.skip_plan }}" = "true" ]; then
            terraform destroy -auto-approve -input=false
          else
            terraform apply -auto-approve tfplan
          fi

      - name: Post Apply Summary
        if: github.event.inputs.action == 'apply'
        working-directory: environments/dev/core-infra
        run: |
          echo "üéâ Core Infrastructure deployment completed successfully!"
          echo ""
          echo "üìã Summary:"
          terraform output -json | jq -r 'to_entries[] | "  \(.key): \(.value.value)"'
          echo ""
          echo "‚úÖ You can now deploy domain modules using the MSA Domain Modules workflow."

      - name: Post Destroy Summary
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "üóëÔ∏è  Core Infrastructure destroyed successfully!"
          echo ""
          echo "‚ö†Ô∏è  Note: All domain modules should have been destroyed before this step."
          echo "üîÑ The Terraform state and backend resources remain available for future deployments."