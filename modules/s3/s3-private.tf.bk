resource "aws_s3_bucket" "s3-bucket-private" {
  bucket = "private-alpha-bucket"
### add after create logging bucket
#  logging {
#    target_bucket = var.logging_bucket_id
#    target_prefix = "${var.s3_access_logging_prefix}/smp-eks-node"
#  }

  tags = merge(tomap({
         Name = "private-alpha-bucket"}),
        var.tags)

}

resource "aws_s3_bucket_acl" "s3-acl-private" {
  bucket = aws_s3_bucket.s3-bucket-private.id
  acl    = "private"
}

resource "aws_s3_bucket_lifecycle_configuration" "s3-lifecycle-config-private" {
  bucket = aws_s3_bucket.s3-bucket-private.bucket

  rule {
    id = "default"

    expiration {
      days = var.expiration_days
    }

    status = var.lifecycle_rule_enabled ? "Enabled" : "Disabled"

    transition {
      days          = var.STANDARD_IA_Transition_days
      storage_class = "STANDARD_IA"
    }
    noncurrent_version_transition {
      noncurrent_days = var.STANDARD_IA_Transition_days
      storage_class   = "STANDARD_IA"
    }

    transition {
      days          = var.GLACIER_Transition_days
      storage_class = "GLACIER"
    }
    noncurrent_version_transition {
      noncurrent_days = var.GLACIER_Transition_days
      storage_class   = "GLACIER"
    }

    noncurrent_version_expiration {
      noncurrent_days = var.expiration_days
    }

  }

}

resource "aws_s3_bucket_server_side_encryption_configuration" "s3-encryption-private" {
  bucket = aws_s3_bucket.s3-bucket-private.bucket
  rule {
    apply_server_side_encryption_by_default {
      kms_master_key_id = var.kms_arn
      sse_algorithm     = "aws:kms"
    }
  }
}

resource "aws_s3_bucket_public_access_block" "s3-bucket-public-access-block-private" {
  bucket = aws_s3_bucket.s3-bucket-private.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_versioning" "s3-versioning-private" {
  count = var.versioning_enabled ? 1 : 0
  bucket = aws_s3_bucket.s3-bucket-private.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_policy" "s3-bucket-policy-private" {
  bucket = aws_s3_bucket.s3-bucket-private.id
  policy = <<POLICY
{
      "Version": "2012-10-17",
      "Statement": [
      {
        "Sid": "bucket account policy",
        "Effect": "Allow",
        "Action": [
          "s3:ListBucket"
        ],
        "Resource": [
                  "arn:aws:s3:::private-alpha-bucket",
                  "arn:aws:s3:::private-alpha-bucket/*"
              ],
        "Principal": {
          "AWS": [
            "arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"
          ]
        }
    },
    {
      "Sid": "bucket account policy",
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject"
      ],
      "Resource": [
                "arn:aws:s3:::private-alpha-bucket",
                "arn:aws:s3:::private-alpha-bucket/*"
            ],
      "Principal": {
        "AWS": [
          "arn:aws:iam::${data.aws_caller_identity.current.account_id}:root"

        ]
      }
    },
    {
      "Sid": "AllowSSLRequestsOnly",
      "Effect": "Deny",
      "Principal": "*",
      "Action": "s3:*",
      "Resource": [
                "arn:aws:s3:::private-alpha-bucket",
                "arn:aws:s3:::private-alpha-bucket/*"
            ],
      "Condition": {
        "Bool": {
          "aws:SecureTransport": "false"
        }
      }
    }
  ]
}
POLICY
}