replicaCount: 3

image:
  repository: order-worker-service
  pullPolicy: IfNotPresent
  tag: "latest"

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080

# Worker service specific configurations
config:
  # Queue processing
  queue:
    provider: "redis"
    concurrency: 10
    maxRetries: 5
    retryDelay: "30s"
    deadLetterQueue: true
  
  # Job types
  jobs:
    orderProcessing:
      enabled: true
      priority: "high"
      timeout: "5m"
    paymentProcessing:
      enabled: true
      priority: "critical"
      timeout: "30s"
    inventoryUpdate:
      enabled: true
      priority: "medium"
      timeout: "10s"
    emailNotification:
      enabled: true
      priority: "low"
      timeout: "15s"
  
  # Monitoring
  monitoring:
    metrics: true
    healthcheck: true
    deadlockDetection: true

env:
  - name: SERVICE_NAME
    value: "order-worker-service"
  - name: SERVICE_PORT
    value: "8080"
  - name: LOG_LEVEL
    value: "info"
  - name: DATABASE_URL
    valueFrom:
      secretKeyRef:
        name: order-worker-db-secret
        key: url
  - name: REDIS_URL
    valueFrom:
      configMapKeyRef:
        name: order-worker-redis-config
        key: url

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 15
  targetCPUUtilizationPercentage: 70

healthCheck:
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5

securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000